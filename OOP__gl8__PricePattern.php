<?php

/**--------------------------------------------------------------------------------------------------------------------------------------------//

// Некоторые принципы проектных шаблонов

Нам нужно создать класс, который будет реализовать оплату за обучение, в нём будут два типа, семинары и лекции, так же,
нужно указать способ оплаты, фиксируемый и почасовой. Рассмотрим реализацию данной задачи, на плохом и 'здоровом' примере
В этой главе рассматриваются следующие принципы действия шаблонов.

• Композиция. Использование агрегирования объектов для достижения большей гибкости, чем с помощью одного только наследования.
• Развязка. Сокращение взаимной зависимости элементов в системе.
• Потенциальные возможности интерфейса. Шаблоны и полиморфизм.
• Категории шаблонов. Типы шаблонов, описываемых в данной книге.


// Композиция и наследование

Наследование - это эффективный способ описания меняющихся обстоятельств или контекста. 
Но из-за этого можно потерять в гибкости, особенно если на классы возложено несколько функциональных обязанностей.


//--------------------------------------------------------------------------------------------------------------------------------------------//*/

?>

<img src="uploads/gl8/1.jpg" alt="глава 8">
<img src="uploads/gl8/2.jpg" alt="глава 8">

<?php 

// В данном примере, указан недоброкачаественный код.
// Класс нельзя в будующем модифицировать без дублирование кода (UML)
// Исправленный код обхожиться большой ценой и юзаются условные конструкцмм, которые можно заменить полиморфизмом


//--------------------------------------------------------------------------------------------------------------------------------------------//

?>

<img src="uploads/gl8/3.jpg" alt="глава 8">
<img src="uploads/gl8/4.jpg" alt="глава 8">

<?php

// Испрвляем ситуацию с помощью шаблона Strategy

// Как можно заметить установленна связь класса CostStrategy с классом Lesson
// Теперь в случае чего, можно будет расширять функционал способа оплаты, не дублируя код и не ломать голову


/**--------------------------------------------------------------------------------------------------------------------------------------------//

// Развязка 

Как прояснялось в главе 6, "Объекты и проектирование", имеет смысл
создавать независимые компоненты, поскольку систему, состоящую из зависимых классов, намного труднее сопровождать. 
Дело в том, что внесение изменений в одном месте программы может повлечь за собой ряд 
соответствующих изменений в других частях кода программы.


//--------------------------------------------------------------------------------------------------------------------------------------------//

// Проблемы 

Повторное использование - одна из основных целей объектно-ориентированного проектирования, а тесная связь вредит этой цели. 
Тесная связь возникает, когда изменение в одном компоненте системы ведет к необходимости вносить множество изменений повсюду. 
Необходимо стремиться создавать независимые компоненты, чтобы можно было вносить
изменения, не опасаясь эффекта цепной реакции непредвиденных последствий. Когда изменяется компонент, степень его независимости влияет на
вероятность того, что эти изменения вызовут ошибки в других частях системы.

На рис. 8.2 был наглядно показан пример тесной связи. В частности, логика схем оплаты занятий повторяется в типах
Lecture и Seminar, и поэтому изменения в компоненте типа TimedPriceLecture приведут к необходимости 
внесения параллельных изменений в ту же самую логику в компоненте типа TimedPriceSeminar. Обновляя один класс 
и не обновляя другой, мы нарушаем нормальную работу системы. 

//--------------------------------------------------------------------------------------------------------------------------------------------//

// Меняющая концепция 

Банда четырех" рекомендует активно искать меняющиеся элементы в классах и оценивать их пригодность для инкапсуляции в новом типе.

Можно извлечь каждый альтернативный вариант в анализируемой условной инструкции и сформировать отдельный класс, 
расширяющий общий абстрактный родительский класс. Затем этот новый тип можно использовать в тех классах, из которых он был извлечен. 
В результате будет достигнуто следующее.

• Сосредоточение обязанностей

• Поддержка гибкости благодаря композиции

• Большая компактность и сосредоточенность иерархий наследования

• Сокращение дублирования


//--------------------------------------------------------------------------------------------------------------------------------------------//

// Проблемы применения шаблонов 

Одна из задач, для которых не существует шаблонов, состоит в необязательном или неподходящем использовании шаблонов.

Такое положение вещей создало проектным шаблонам плохую репутацию в некоторых кругах. 
Решения на основе шаблонов изящны и ясны, и поэтому возникает искушение применять их везде, 
где только можно, независимо от того, есть ли в этом реальная необходимость.

Работая над крупными проектами на РНР, я обычно разбиваю приложение на уровни, отделяя 
логику приложения от представления данных и уровня сохранения данных. И в этом случае я пользуюсь всевозможными
видами основных и промышленных шаблонов, а также их комбинациями. 


Но если меня попросят создать простую форму для обратной связи небольшого веб-сайта, 
я могу запросто воспользоваться процедурным кодом, разместив его на одной странице с кодом HTML. 
В этом случае мне не требуется гибкость в крупных масштабах, потому что я не буду что-либо строить 
на этой первоначальной основе. Мне не потребуются и шаблоны, позволяющие решать соответствующие задачи 
в более крупных системах. Поэтому я применяю второй принцип экстремального программирования:
"Делайте самое простое, что только может работать".


//--------------------------------------------------------------------------------------------------------------------------------------------//

// Шаблоны для объктов

Эти шаблоны предназначены для создания экземпляров объектов. Это
важная категория, если учитывать принцип кодирования на основе интерфейса. 
Если в своем проекте мы работаем с абстрактными родительскими классами, то должны разработать с
тратегии создания экземпляров объектов на основе конкретных подклассов. Эти объекты будут передаваться по всей системе.


//--------------------------------------------------------------------------------------------------------------------------------------------//

// Шаблоны для организации объектов и классов 

Эти шаблоны помогают упорядочить композиционные отношения объектов. Проще говоря, эти шаблоны показывают, как объединять объекты и классы.


//--------------------------------------------------------------------------------------------------------------------------------------------//

// Шаблоны ориентированы на задачи 

Эти шаблоны описывают механизмы, посредством которых классы и объекты взаимодействуют для достижения целей.


//--------------------------------------------------------------------------------------------------------------------------------------------//

// Промышленные шаблоны 

Мы рассмотрим некоторые шаблоны, описывающие типичные задачи и решения программирования для Интернета. 


//--------------------------------------------------------------------------------------------------------------------------------------------//

//Шаблоны баз данных

Мы также сделаем краткий обзор шаблонов, которые помогают сохранять и извлекать данные из баз данных 
и устанавливать соответствие между объектами базы данных и приложения.


//--------------------------------------------------------------------------------------------------------------------------------------------//*/